#include <cstdint>
#include <cstdlib>

#include "test_config.h"
#include "CppUTest/TestHarness.h"

enum {
  WORDS = 128
};

typedef struct data_s {
  uint32_t word[WORDS];
  size_t length;
} data_t;

static const data_t data_0 = { .word = {
  0xb8d0f8caul,0x36d42d43ul,0x96e6c5a0ul,0x515d7e4aul,0x7baba99eul,0x0d489ce3ul,0xa33b9776ul,0xcaa4718ful,
  0x974642fbul,0xaee916c9ul,0xdce4d3c3ul,0x4cdeb1c9ul,0x50270000ul,0xc5120538ul,0x169de503ul,0x5e13b11cul,
  0x1ccbb520ul,0x5dc4f289ul,0xa79afb79ul,0xd39694caul,0xd94b2d9cul,0x43ab3cccul,0x48752af2ul,0xf4df92cbul,
  0xf8b8eb64ul,0x299f453cul,0x6ce2a1bdul,0xf4b2a956ul,0x20e70652ul,0x04feb89bul,0x2fce599dul,0x5efbcec6ul,
  0xbc9b3963ul,0xa41355a3ul,0xbc9963daul,0x55602a85ul,0x516a5cabul,0x75df03dbul,0xffec9a3cul,0x566036acul,
  0x33fa188bul,0x060d5226ul,0x43b81875ul,0xc7170f47ul,0xc553fcadul,0x4543397eul,0x8e92b20ful,0x01313863ul,
  0x23ab8f5eul,0xed97cbfeul,0x17cb8587ul,0x752f16f1ul,0x78cafdc5ul,0x663258edul,0x66e8322aul,0xbac15193ul,
  0x9d04a062ul,0xac81ebc2ul,0xd5a445daul,0xcee93501ul,0x16723868ul,0xa964cfa3ul,0x1f5e45f6ul,0x2a6564a2ul,
  0x57ba44cdul,0x88b6937bul,0x73523c10ul,0x2e4beee6ul,0xa67a2387ul,0x5a211530ul,0x44f1aa2dul,0x3af4313cul,
  0x1868ee2aul,0xf759fa24ul,0x3c19a02bul,0x87c630e3ul,0xe31c9fbeul,0xa24cd7feul,0xfc612bcaul,0xd43dec65ul,
  0x4d03271bul,0xc0c7806cul,0x6cc5e0e0ul,0xc59ef1b8ul,0xbd12e9b7ul,0x9e7ab5f1ul,0x0632a549ul,0x8870e840ul,
  0xb0e70106ul,0x58d2c177ul,0x56161febul,0xbad524c1ul,0x2df60e9cul,0xeedc0c41ul,0x0cc7581bul,0x26eab189ul,
  0xd0dec84aul,0xa36788d8ul,0x86688b8bul,0xb72ffae2ul,0x629272a3ul,0x7ab353aeul,0xc96d5b61ul,0x9cd9f349ul,
  0x57ef749cul,0x513095c4ul,0xd415c18cul,0xf2750354ul,0xa83b12a0ul,0x2dcab815ul,0xade84045ul,0xea058bb2ul,
  0xd099e198ul,0xdef48083ul,0xf38a594bul,0xa5fac9fful,0xaa5d3115ul,0x0b3d58a1ul,0xfd3cc574ul,0xf8648407ul,
  0xc3bf00f2ul,0xca0ed06bul,0x3f803024ul,0xe6a743eeul,0x4d92df70ul,0xa1f23d3ful,0x5c31d752ul,0x6e41b303ul},
  .length = WORDS };

static const data_t data_1 = { .word = {
  0x929cb50bul,0xd24b6fe7ul,0x9d43ff0ful,0xf70e76f7ul,0xfc2bcfe2ul,0xd6108908ul,0x3cdd907bul,0x399c8870ul,
  0xd4752cacul,0x45ec3c21ul,0x3a8f227cul,0x1e18a23bul,0xdb6677dbul,0x025fa75eul,0x3acae812ul,0x1aacac0bul,
  0x7deb6a21ul,0x1ae27b65ul,0x7423190cul,0xe45f46deul,0x0c4b2c7eul,0xac1f87feul,0x35cd9ae5ul,0x04154ffbul,
  0xabee89c5ul,0x850d62b3ul,0x54076dd4ul,0x08c2702ful,0x1f2df5fful,0x648fa414ul,0x0ccde620ul,0x09eb50b2ul,
  0x55eafcf6ul,0x087b345dul,0xa00503a5ul,0x9e36a4d4ul,0xce1c06beul,0xac921d7aul,0xcb7f0f0cul,0xd735530bul,
  0x70c29ccful,0x44f49595ul,0x6de93ba8ul,0x650b5df3ul,0x0881262aul,0x25a0e174ul,0xf94f9d78ul,0xb17b5ea6ul,
  0xa21aa50ful,0x9eab7cf7ul,0x2d991a08ul,0x96c0855eul,0xf8c7ef0aul,0xe670157bul,0xea7b261aul,0xb9ba0f16ul,
  0xb3facc5bul,0x04f553a0ul,0x2edf395ful,0xc044268cul,0xfef3278aul,0x87477164ul,0xc932312eul,0x2e883d13ul,
  0x8ee1504bul,0x38d01e59ul,0x7bd089f5ul,0x26fc4d46ul,0xfd57299bul,0xb5430caaul,0x500b1a98ul,0xacbff20eul,
  0x63fbfdc2ul,0x708aec03ul,0xd354161cul,0xd8bbd74cul,0x7861da85ul,0x44c18462ul,0xea8ad38bul,0x62d89d9eul,
  0x9b90f367ul,0xd6ef4370ul,0xf33f21f3ul,0x7d9fe42aul,0x6a4d684aul,0x012298c1ul,0x6dc19b3aul,0x4eefc671ul,
  0x9ad39b4ful,0x5e55f907ul,0x45d88f3aul,0x806b93e0ul,0x02e3a302ul,0x26fc096eul,0x6ceaf9a5ul,0x35f97eb2ul,
  0xa2e799feul,0x5e03501dul,0xa8ea33dcul,0x03580e33ul,0x143de9b2ul,0x09d788bcul,0xe87feae2ul,0xa63acc49ul,
  0x3f0503a9ul,0xe738566aul,0x71cb0a04ul,0xcbcff1f3ul,0xd9308e66ul,0x4c667f0bul,0xdfb622b0ul,0xf8bdcae9ul,
  0x0aa9519ful,0x77d50b63ul,0x6fb7cf38ul,0x6cbddacaul,0x9ad45c7dul,0xaccfc197ul,0x881463fful,0x20e3bdbaul,
  0x1054490dul,0x8e1f9838ul,0x8c7686e8ul,0xe7e1599cul,0x1bbd5435ul,0xf1f2dddbul,0xcbb77cc7ul,0x2f99ab0eul},
  .length = WORDS };


uint32_t linear_search(uint32_t x, const data_t *data)
{
  volatile uint32_t n = 0;

  while (n < data->length && data->word[n] != x)
  {
    n++;
  }

  if(n < data->length)
  {
    return n;
  }
  return 0xfffffffful;
}

TEST_GROUP(linear_search)
{
  void setup() { }
  void teardown() { }
};

TEST(linear_search, testData0Search1)
{
  CHECK_EQUAL(0x7f, linear_search(0x6e41b303ul, &data_0));
}
TEST(linear_search, testData0Search2)
{
  CHECK_EQUAL(0x00, linear_search(0xb8d0f8caul, &data_0));
}
TEST(linear_search, testData0Search3)
{
  CHECK_EQUAL(0x40, linear_search(0x57ba44cdul, &data_0));
}
TEST(linear_search, testData0Search4)
{
  CHECK_EQUAL(0xfffffffful, linear_search(0x00ul, &data_0));
}

TEST(linear_search, testData1Search1)
{
  CHECK_EQUAL(0x00, linear_search(0x929cb50bul, &data_1));
}
TEST(linear_search, testData1Search2)
{
  CHECK_EQUAL(0x40, linear_search(0x8ee1504bul, &data_1));
}
TEST(linear_search, testData1Search3)
{
  CHECK_EQUAL(0x7f, linear_search(0x2f99ab0eul, &data_1));
}
TEST(linear_search, testData1Search4)
{
  CHECK_EQUAL(0xfffffffful, linear_search(0x00ul, &data_1));
}
