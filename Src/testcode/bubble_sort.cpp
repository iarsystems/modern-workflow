#include <vector>
#include <cstdint>

#include "test_config.h"
#include "CppUTest/TestHarness.h"

void bubbleSort(std::vector<unsigned int>& v) {
  size_t n = v.size();

  for (size_t i = 0; i < n - 1; i++) {
    // Creating a flag to denote the case wwhen array
    // is sorted and doesnt cause any swap
    bool flag = false;
    for (size_t j = 0; j < n - i - 1; j++) {
      if (v[j] > v[j + 1]) {
        std::swap(v[j], v[j + 1]);
        // Setting flag true when swap happened
        flag = true;
      }
    }
    // Checking if the flag is set or not
    if (!flag)
      break;
  }
}

TEST_GROUP(bubble_sort)
{
  void setup() { }
  void teardown() { }
};

TEST(bubble_sort, testSortedData0)
{
  std::vector<unsigned int> data_0 = {
    0x6f82d1c6ul,0xf50742c3ul,0x4f54b6a0ul,0xbfcb2f9cul,0x7f3c92e7ul,0x0b2f3041ul,0xdfacfa33ul,0xa32bb721ul,
    0xbf3bf402ul,0xf6f41892ul,0x2b2773acul,0x19b43079ul,0x7b5cdaf5ul,0xe45f83d8ul,0x4b37157dul,0xa4a2147eul,
    0xcc4778ddul,0xd553da46ul,0xa55f94c5ul,0xf2db01edul,0xde779a8dul,0xbdc4c201ul,0x5dbc93beul,0x23f74ebful,
    0x560ed3e0ul,0xae41a306ul,0x563d1fc7ul,0xf591e548ul,0xc46b18e1ul,0x4cba1c29ul,0x01266aaaul,0x3dbc8fb6ul,
    0xc8cb1cc4ul,0x77c29757ul,0x09ef9a15ul,0x2f000efeul,0x493784c5ul,0x8b9a3f4cul,0x328daaa5ul,0x88d6e4d6ul,
    0xefe2fd06ul,0xd02c7d73ul,0xe99177eful,0xef3a2392ul,0xbbb55706ul,0x7a13f54aul,0xf6ec1c4bul,0x4226c795ul,
    0x2f984f2ful,0xbf947d62ul,0x29a8e6e3ul,0xebe6bb8cul,0x87098c86ul,0x666c972aul,0x6754d001ul,0x2f11a1c7ul,
    0x09f83489ul,0x61fd6e4aul,0x7112eeeaul,0xcd80b09aul,0x3260ef78ul,0xd92cbd9ful,0x0af58e8ful,0xaeb59a54ul,
    0xc9da769ful,0xaa9f1299ul,0x3a0aa778ul,0x0041dda5ul,0x98ccee1aul,0x2fc5a946ul,0xdad6471bul,0x87313c73ul,
    0xdcc752aful,0x12cd6c80ul,0x92cec456ul,0x2cb7b4d0ul,0x162191c3ul,0x77c7f2e7ul,0xec1fc694ul,0x600caf1bul,
    0x39d30784ul,0x3e5793a0ul,0xa336e836ul,0x5cff20adul,0x50c52c74ul,0xb6f1299eul,0x2259bc68ul,0x48536379ul,
    0x21b84067ul,0xc891a4d8ul,0x2273f73ful,0x200553eful,0x33f0eb2dul,0xb1cb7ee9ul,0xb303d3abul,0x5809cf22ul,
    0xc7bdebb1ul,0xb8595d22ul,0xe32248ddul,0xfc86e2eful,0xe0db9364ul,0x2e7e3e8bul,0xbf04d070ul,0xd38a2f70ul,
    0x08bd7692ul,0xbaea8accul,0x1e2e0e7eul,0x52fe87a2ul,0xcaa648a4ul,0x1a904174ul,0x57ca859bul,0xead73fcdul,
    0xc86d22c0ul,0xb1c711eaul,0xe1128c9dul,0x42c2ddbeul,0xa3a8811ful,0x72538e5dul,0xcd540e9cul,0x7015834cul,
    0xbee14206ul,0x2d179a3eul,0x3d06a844ul,0xad2a29bcul,0x3527adc1ul,0x87e66905ul,0x6164144dul,0xed52a717ul };

  std::vector<unsigned int> answer_0 = {
    0x0041dda5ul,0x01266aaaul,0x08bd7692ul,0x09ef9a15ul,0x09f83489ul,0x0af58e8ful,0x0b2f3041ul,0x12cd6c80ul,
    0x162191c3ul,0x19b43079ul,0x1a904174ul,0x1e2e0e7eul,0x200553eful,0x21b84067ul,0x2259bc68ul,0x2273f73ful,
    0x23f74ebful,0x29a8e6e3ul,0x2b2773acul,0x2cb7b4d0ul,0x2d179a3eul,0x2e7e3e8bul,0x2f000efeul,0x2f11a1c7ul,
    0x2f984f2ful,0x2fc5a946ul,0x3260ef78ul,0x328daaa5ul,0x33f0eb2dul,0x3527adc1ul,0x39d30784ul,0x3a0aa778ul,
    0x3d06a844ul,0x3dbc8fb6ul,0x3e5793a0ul,0x4226c795ul,0x42c2ddbeul,0x48536379ul,0x493784c5ul,0x4b37157dul,
    0x4cba1c29ul,0x4f54b6a0ul,0x50c52c74ul,0x52fe87a2ul,0x560ed3e0ul,0x563d1fc7ul,0x57ca859bul,0x5809cf22ul,
    0x5cff20adul,0x5dbc93beul,0x600caf1bul,0x6164144dul,0x61fd6e4aul,0x666c972aul,0x6754d001ul,0x6f82d1c6ul,
    0x7015834cul,0x7112eeeaul,0x72538e5dul,0x77c29757ul,0x77c7f2e7ul,0x7a13f54aul,0x7b5cdaf5ul,0x7f3c92e7ul,
    0x87098c86ul,0x87313c73ul,0x87e66905ul,0x88d6e4d6ul,0x8b9a3f4cul,0x92cec456ul,0x98ccee1aul,0xa32bb721ul,
    0xa336e836ul,0xa3a8811ful,0xa4a2147eul,0xa55f94c5ul,0xaa9f1299ul,0xad2a29bcul,0xae41a306ul,0xaeb59a54ul,
    0xb1c711eaul,0xb1cb7ee9ul,0xb303d3abul,0xb6f1299eul,0xb8595d22ul,0xbaea8accul,0xbbb55706ul,0xbdc4c201ul,
    0xbee14206ul,0xbf04d070ul,0xbf3bf402ul,0xbf947d62ul,0xbfcb2f9cul,0xc46b18e1ul,0xc7bdebb1ul,0xc86d22c0ul,
    0xc891a4d8ul,0xc8cb1cc4ul,0xc9da769ful,0xcaa648a4ul,0xcc4778ddul,0xcd540e9cul,0xcd80b09aul,0xd02c7d73ul,
    0xd38a2f70ul,0xd553da46ul,0xd92cbd9ful,0xdad6471bul,0xdcc752aful,0xde779a8dul,0xdfacfa33ul,0xe0db9364ul,
    0xe1128c9dul,0xe32248ddul,0xe45f83d8ul,0xe99177eful,0xead73fcdul,0xebe6bb8cul,0xec1fc694ul,0xed52a717ul,
    0xef3a2392ul,0xefe2fd06ul,0xf2db01edul,0xf50742c3ul,0xf591e548ul,0xf6ec1c4bul,0xf6f41892ul,0xfc86e2eful };

  bubbleSort(data_0);

  bool equal = std::equal(data_0.begin(), data_0.end(), answer_0.begin(), [](uint32_t a, uint32_t b)
  {
    return (a == b);
  });

  CHECK_TRUE(equal);
}